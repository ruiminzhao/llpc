; Test requires at least a RUN line - this one does nothing
; RUN: echo "Empty test"

;#if LLPC_BUILD_NAVI31
; BEGIN_LGC_TEST
; GFX11 variants - integrate into main body when upstreamed
; REQUIRES: gfx11
; ----------------------------------------------------------------------
; Extract 1: LocalInvocationId test, from three VGPRs (GFX8) or one VGPR (GFX11) set up by hardware

; RUN: lgc -extract=1 -mcpu=gfx1100 %s -o - | FileCheck --check-prefixes=CHECK6_GFX11 %s

; CHECK6_GFX11-LABEL: _amdgpu_cs_main:
; CHECK6_GFX11-NOT: v0
; CHECK6_GFX11-DAG: v_and_b32_e32 v[[#REG1:]], 0x3ff, v0
; CHECK6_GFX11-DAG: v_bfe_u32 v[[#REG1+1]], v0, 10, 10
; CHECK6_GFX11-DAG: v_lshrrev_b32_e32 v[[#REG1+2]], 20, v0
; CHECK6_GFX11: buffer_store_b96 v{{\[}}[[#REG1]]:[[#REG1+2]]{{\]}},

define dllexport spir_func void @lgc.shader.CS.main() local_unnamed_addr #0 !lgc.shaderstage !0 {
.entry:
  %0 = call i8 addrspace(7)* (...) @lgc.create.load.buffer.desc.p7i8(i32 0, i32 0, i32 0, i32 2)
  %1 = call <3 x i32> (...) @lgc.create.read.builtin.input.v3i32(i32 27, i32 0, i32 undef, i32 undef)
  %2 = bitcast i8 addrspace(7)* %0 to <3 x i32> addrspace(7)*
  store <3 x i32> %1, <3 x i32> addrspace(7)* %2, align 4
  ret void
}

declare <3 x i32> @lgc.create.read.builtin.input.v3i32(...) local_unnamed_addr #0
declare i8 addrspace(7)* @lgc.create.load.buffer.desc.p7i8(...) local_unnamed_addr #0

attributes #0 = { nounwind }

!lgc.user.data.nodes = !{!1, !2}
!llpc.compute.mode = !{!3}

; ShaderStageCompute
!0 = !{i32 7}
; type, offset, size, count
!1 = !{!"DescriptorTableVaPtr", i32 0, i32 2, i32 1, i32 1}
; type, offset, size, set, binding, stride
!2 = !{!"DescriptorBuffer", i32 6, i32 0, i32 4, i32 0, i32 0, i32 4}
; Compute mode, containing workgroup size
!3 = !{i32 5, i32 6, i32 7}

; ----------------------------------------------------------------------
; Extract 2: GlobalInvocationId test, from WorkgroupId * WorkgroupSize + LocalInvocationId
; WorkgroupId is in three SGPRs set by hardware
; WorkgroupSize is constant from shader mode
; LocalInvocationId is in three VGPRs (GFX8) or one VGPR (GFX11) set by hardware

; RUN: lgc -extract=2 -mcpu=gfx1100 %s -o - | FileCheck --check-prefixes=CHECK10_GFX11 %s

; CHECK10_GFX11-LABEL: _amdgpu_cs_main:
; CHECK10_GFX11-DAG: v_and_b32_e32 v[[#REG1:]], 0x3ff, v0
; CHECK10_GFX11-DAG: v_bfe_u32 v[[#REG2:]], v0, 10, 10
; CHECK10_GFX11-DAG: v_lshrrev_b32_e32 v[[#REG3:]], 20, v0
; CHECK10_GFX11-DAG: s_mov_b32 [[INPUT0:s[0-9]+]], s3
; CHECK10_GFX11-DAG: v_mad_u64_u32 v[[[#REG4:]]:[[#]]], null, [[INPUT0]], 5, v[[[#REG1]]:[[#REG1+1]]]
; CHECK10_GFX11-DAG: v_mad_u64_u32 v[[[#REG5:]]:[[#]]], null, s4, 6, v[[[#REG2]]:[[#REG2+1]]]
; CHECK10_GFX11-DAG: v_mad_u64_u32 v[[[#REG6:]]:[[#]]], null, s5, 7, v[[[#REG3]]:[[#REG3+1]]]
; CHECK10_GFX11: buffer_store_b96 v{{\[}}[[#REG4]]:[[#REG4+2]]{{\]}},
; rsrc2 bits 7,8,9 need to be set to enable the three WorkgroupId SGPRs
; CHECK10_GFX11: COMPUTE_PGM_RSRC2): 0x{{[0-9a-f]*[7f][89a-f][0-9a-f]$}}

define dllexport spir_func void @lgc.shader.CS.main() local_unnamed_addr #0 !lgc.shaderstage !0 {
.entry:
  %0 = call i8 addrspace(7)* (...) @lgc.create.load.buffer.desc.p7i8(i32 0, i32 0, i32 0, i32 2)
  %1 = call <3 x i32> (...) @lgc.create.read.builtin.input.v3i32(i32 28, i32 0, i32 undef, i32 undef)
  %2 = bitcast i8 addrspace(7)* %0 to <3 x i32> addrspace(7)*
  store <3 x i32> %1, <3 x i32> addrspace(7)* %2, align 4
  ret void
}

declare <3 x i32> @lgc.create.read.builtin.input.v3i32(...) local_unnamed_addr #0
declare i8 addrspace(7)* @lgc.create.load.buffer.desc.p7i8(...) local_unnamed_addr #0

attributes #0 = { nounwind }

!lgc.user.data.nodes = !{!1, !2}
!llpc.compute.mode = !{!3}

; ShaderStageCompute
!0 = !{i32 7}
; type, offset, size, count
!1 = !{!"DescriptorTableVaPtr", i32 0, i32 2, i32 1, i32 1}
; type, offset, size, set, binding, stride
!2 = !{!"DescriptorBuffer", i32 6, i32 0, i32 4, i32 0, i32 0, i32 4}
; Compute mode, containing workgroup size
!3 = !{i32 5, i32 6, i32 7}

; ----------------------------------------------------------------------
; Extract 3: LocalInvocationIndex test, linearized from LocalInvocationId and WorkgroupSize
; LocalInvocationId from three VGPRs (GFX8) or one VGPR (GFX11) set up by hardware

; RUN: lgc -extract=3 -mcpu=gfx1100 %s -o - | FileCheck --check-prefixes=CHECK11_GFX11 %s

; CHECK11_GFX11-LABEL: _amdgpu_cs_main:
; CHECK11_GFX11-DAG: v_and_b32_e32 v[[#REG1:]], 0x3ff, v0
; CHECK11_GFX11-DAG: v_bfe_u32 v[[#REG2:]], v0, 10, 10
; CHECK11_GFX11-DAG: v_lshrrev_b32_e32 v[[#REG3:]], 20, v0
; CHECK11_GFX11: v_mad_u32_u24 v[[#REG4:]], v[[#REG3]], 6, v[[#REG2]]
; CHECK11_GFX11: v_mad_u32_u24 v[[#REG5:]], v[[#REG4]], 5, v[[#REG1]]
; CHECK11_GFX11: buffer_store_b32 v[[#REG5]],

define dllexport spir_func void @lgc.shader.CS.main() local_unnamed_addr #0 !lgc.shaderstage !0 {
.entry:
  %0 = call i8 addrspace(7)* (...) @lgc.create.load.buffer.desc.p7i8(i32 0, i32 0, i32 0, i32 2)
  %1 = call i32 (...) @lgc.create.read.builtin.input.i32(i32 29, i32 0, i32 undef, i32 undef)
  %2 = bitcast i8 addrspace(7)* %0 to i32 addrspace(7)*
  store i32 %1, i32 addrspace(7)* %2, align 4
  ret void
}

declare i32 @lgc.create.read.builtin.input.i32(...) local_unnamed_addr #0
declare i8 addrspace(7)* @lgc.create.load.buffer.desc.p7i8(...) local_unnamed_addr #0

attributes #0 = { nounwind }

!lgc.user.data.nodes = !{!1, !2}
!llpc.compute.mode = !{!3}

; ShaderStageCompute
!0 = !{i32 7}
; type, offset, size, count
!1 = !{!"DescriptorTableVaPtr", i32 0, i32 2, i32 1, i32 1}
; type, offset, size, set, binding, stride
!2 = !{!"DescriptorBuffer", i32 6, i32 0, i32 4, i32 0, i32 0, i32 4}
; Compute mode, containing workgroup size
!3 = !{i32 5, i32 6, i32 7}

; ----------------------------------------------------------------------
; Extract 4: SubgroupId, calculated as LocalInvocationIndex divided by wave size
; LocalInvocationIndex linearized from LocalInvocationId and WorkgroupSize
; LocalInvocationId from three VGPRs (GFX8) or one SGPR (>= GFX10.3) set up by hardware

; RUN: lgc -extract=4 -mcpu=gfx1100 %s -o - | FileCheck --check-prefixes=CHECK12_GFX11 %s

; CHECK12_GFX11-LABEL: _amdgpu_cs_main:
; CHECK12_GFX11-DAG: s_bfe_u32 s[[#REG:]], s6, 0x50014
; CHECK12_GFX11-DAG: v_mov_b32_e32 v[[#REG1:]], s[[#REG]]
; CHECK12_GFX11: buffer_store_b32 v[[#REG1]],

define dllexport spir_func void @lgc.shader.CS.main() local_unnamed_addr #0 !lgc.shaderstage !0 {
.entry:
  %0 = call i8 addrspace(7)* (...) @lgc.create.load.buffer.desc.p7i8(i32 0, i32 0, i32 0, i32 2)
  %1 = call i32 (...) @lgc.create.read.builtin.input.i32(i32 40, i32 0, i32 undef, i32 undef)
  %2 = bitcast i8 addrspace(7)* %0 to i32 addrspace(7)*
  store i32 %1, i32 addrspace(7)* %2, align 4
  ret void
}

declare i32 @lgc.create.read.builtin.input.i32(...) local_unnamed_addr #0
declare i8 addrspace(7)* @lgc.create.load.buffer.desc.p7i8(...) local_unnamed_addr #0

attributes #0 = { nounwind }

!lgc.user.data.nodes = !{!1, !2}
!llpc.compute.mode = !{!3}

; ShaderStageCompute
!0 = !{i32 7}
; type, offset, size, count
!1 = !{!"DescriptorTableVaPtr", i32 0, i32 2, i32 1, i32 1}
; type, offset, size, set, binding, stride
!2 = !{!"DescriptorBuffer", i32 6, i32 0, i32 4, i32 0, i32 0, i32 4}
; Compute mode, containing workgroup size
!3 = !{i32 5, i32 6, i32 7}

;#endif
